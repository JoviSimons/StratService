// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.0
// source: strat.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StratServiceClient is the client API for StratService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StratServiceClient interface {
	ReturnAll(ctx context.Context, in *ReturnAllReq, opts ...grpc.CallOption) (StratService_ReturnAllClient, error)
	ReturnStrat(ctx context.Context, in *ReturnStratReq, opts ...grpc.CallOption) (*ReturnStratRes, error)
	StoreStrat(ctx context.Context, in *StoreStratReq, opts ...grpc.CallOption) (*StoreStratRes, error)
}

type stratServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStratServiceClient(cc grpc.ClientConnInterface) StratServiceClient {
	return &stratServiceClient{cc}
}

func (c *stratServiceClient) ReturnAll(ctx context.Context, in *ReturnAllReq, opts ...grpc.CallOption) (StratService_ReturnAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &StratService_ServiceDesc.Streams[0], "/proto.StratService/returnAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &stratServiceReturnAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StratService_ReturnAllClient interface {
	Recv() (*ReturnAllRes, error)
	grpc.ClientStream
}

type stratServiceReturnAllClient struct {
	grpc.ClientStream
}

func (x *stratServiceReturnAllClient) Recv() (*ReturnAllRes, error) {
	m := new(ReturnAllRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stratServiceClient) ReturnStrat(ctx context.Context, in *ReturnStratReq, opts ...grpc.CallOption) (*ReturnStratRes, error) {
	out := new(ReturnStratRes)
	err := c.cc.Invoke(ctx, "/proto.StratService/returnStrat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stratServiceClient) StoreStrat(ctx context.Context, in *StoreStratReq, opts ...grpc.CallOption) (*StoreStratRes, error) {
	out := new(StoreStratRes)
	err := c.cc.Invoke(ctx, "/proto.StratService/storeStrat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StratServiceServer is the server API for StratService service.
// All implementations must embed UnimplementedStratServiceServer
// for forward compatibility
type StratServiceServer interface {
	ReturnAll(*ReturnAllReq, StratService_ReturnAllServer) error
	ReturnStrat(context.Context, *ReturnStratReq) (*ReturnStratRes, error)
	StoreStrat(context.Context, *StoreStratReq) (*StoreStratRes, error)
	mustEmbedUnimplementedStratServiceServer()
}

// UnimplementedStratServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStratServiceServer struct {
}

func (UnimplementedStratServiceServer) ReturnAll(*ReturnAllReq, StratService_ReturnAllServer) error {
	return status.Errorf(codes.Unimplemented, "method ReturnAll not implemented")
}
func (UnimplementedStratServiceServer) ReturnStrat(context.Context, *ReturnStratReq) (*ReturnStratRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnStrat not implemented")
}
func (UnimplementedStratServiceServer) StoreStrat(context.Context, *StoreStratReq) (*StoreStratRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreStrat not implemented")
}
func (UnimplementedStratServiceServer) mustEmbedUnimplementedStratServiceServer() {}

// UnsafeStratServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StratServiceServer will
// result in compilation errors.
type UnsafeStratServiceServer interface {
	mustEmbedUnimplementedStratServiceServer()
}

func RegisterStratServiceServer(s grpc.ServiceRegistrar, srv StratServiceServer) {
	s.RegisterService(&StratService_ServiceDesc, srv)
}

func _StratService_ReturnAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReturnAllReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StratServiceServer).ReturnAll(m, &stratServiceReturnAllServer{stream})
}

type StratService_ReturnAllServer interface {
	Send(*ReturnAllRes) error
	grpc.ServerStream
}

type stratServiceReturnAllServer struct {
	grpc.ServerStream
}

func (x *stratServiceReturnAllServer) Send(m *ReturnAllRes) error {
	return x.ServerStream.SendMsg(m)
}

func _StratService_ReturnStrat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnStratReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StratServiceServer).ReturnStrat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StratService/returnStrat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StratServiceServer).ReturnStrat(ctx, req.(*ReturnStratReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StratService_StoreStrat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreStratReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StratServiceServer).StoreStrat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StratService/storeStrat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StratServiceServer).StoreStrat(ctx, req.(*StoreStratReq))
	}
	return interceptor(ctx, in, info, handler)
}

// StratService_ServiceDesc is the grpc.ServiceDesc for StratService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StratService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.StratService",
	HandlerType: (*StratServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "returnStrat",
			Handler:    _StratService_ReturnStrat_Handler,
		},
		{
			MethodName: "storeStrat",
			Handler:    _StratService_StoreStrat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "returnAll",
			Handler:       _StratService_ReturnAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "strat.proto",
}
